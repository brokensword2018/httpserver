整体介绍：
这个日志分为两部分，前端负责搜集所有工作线程的日志消息，后端负责将日志消息写入文件。当前端写
满一个缓冲块，或者每隔一段事件，后端会被唤醒。因为写入文件IO比较慢，所以单开一个线程来写。

AppendFile类 
功能:
    直接操作文件,构造函数中打开文件,析构函数中关闭文件
主要数据成员:
    指向文件的指针
    文件的缓冲区
主要方法:
    Append : 把字符串写到文件中

LogFile类:
功能:
    对AppendFile进一步封装, 写一定的次数(默认1024)就flush一次
主要成员:
    内含一个AppendFile成员
主要方法:
    Append : 向文件中写

AsyncLogging类:全局只有一个生命周期也程序一样长
功能:
    启动双缓存机制,前端向后端写,后端向文件写;前段写满一个缓存快,或则间隔一段时间,通过条件变量唤醒后端.
    启动一个后端线程,用于往文件里写日志;
主要方法:
    Append(); 向前端的缓冲区写数据
    ThreadFunc: 后端的线程函数

Logger类:
    作为用户的接口，内含一个LogStream对象


LogStream类:
功能:
    重载了输出运算符,把输出的日志弄到自带的缓存里
主要成员:
    一个缓冲区
主要方法:
    对各种输出,重载输出运算符.


日志输入时,程序流程;
    LOG << 1;
    #define LOG Logger(__FILE__, __LINE__).stream()  
    构造Logger对象,返回LogStream对象的引用, 把数据存到LogStream的缓存中;
    Logger对象第一次析构时,创建一个AsyncLogging对象;把数据写到前端（第一次将数据写到前端时）
    以后析构时,只负责把数据写到前端.





